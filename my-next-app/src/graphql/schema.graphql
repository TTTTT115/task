type Task {
  id: ID!
  title: String!
  assigneeId: ID
  status: TaskStatus!
  deadline: String
  createdAt: String!
  updatedAt: String!
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type TaskEdge {
  node: Task!
  cursor: String!
}

type TaskConnection {
  edges: [TaskEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type Query {
  tasks(first: Int, after: String, last: Int, before: String): TaskConnection
}

type Mutation {
  updateTask(id: ID!, title: String, assigneeId: ID, status: TaskStatus, deadline: String): Task
  # Add other mutations here if needed
}

type Subscription {
  taskUpdated: Task
}
