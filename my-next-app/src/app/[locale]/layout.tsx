import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "../globals.css";
import ThemeRegistry from "../ThemeRegistry"; // MUI Theme Provider
import { NextIntlClientProvider } from 'next-intl';
import { getMessages } from 'next-intl/server';
import MswDevProvider from '../MswDevProvider'; // Import MSW Provider

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "Create Next App | i18n Workaround", // Updated title
  description: "Generated by create next app, with i18n workaround for params typing.",
};

interface RootLayoutProps {
  children: React.ReactNode;
  // TODO: Revisit this type. Using 'any' as a workaround for a persistent TS error.
  // The expected type 'LayoutProps' seems to want params as Promise<any>.
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  params: any;
}

export default async function RootLayout({
  children,
  params,
}: RootLayoutProps) {
  const messages = await getMessages();

  // Assuming params.locale will exist and be a string,
  // as Next.js routing provides it based on the directory structure.
  const locale = typeof params.locale === 'string' ? params.locale : 'en'; // Fallback, though should always be string

  return (
    <html lang={locale}>
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
      >
        <MswDevProvider>
          <NextIntlClientProvider locale={locale} messages={messages}>
            <ThemeRegistry>{children}</ThemeRegistry>
          </NextIntlClientProvider>
        </MswDevProvider>
      </body>
    </html>
  );
}
